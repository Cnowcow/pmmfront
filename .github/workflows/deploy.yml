name: Deploy Spring Boot API to Synology NAS

on:
  push:
    branches:
      - main  # main 브랜치에 푸시할 때마다 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # Node.js 설정
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'  # Node.js 20 버전 설정

      # React .env 파일 생성 (GitHub Secrets에서 가져오기)
      - name: Create .env from GitHub Secrets
        run: |
          echo "REACT_APP_NAVER_MAP_CLIENT_ID=${{ secrets.REACT_APP_NAVER_MAP_CLIENT_ID }}" > .env
          echo "REACT_APP_KAKAO_MAP_KEY=${{ secrets.REACT_APP_KAKAO_MAP_KEY }}" >> .env
          echo "REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}" >> .env

      - name: install npm dependencies
        run: npm install && npm install @rollup/plugin-terser@latest --save-dev && npm install @jridgewell/sourcemap-codec --save && npm install --save rimraf@latest && npm uninstall w3c-hr-time

      - name: react build
        run: npm run build

      # DockerHub 로그인
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Docker 이미지 빌드
      - name: Build Docker image
        run: |
          docker build --no-cache -t pmmfronttest .  

      # Docker 이미지를 DockerHub에 푸시
      - name: Push Docker image to DockerHub
        run: |
          docker tag pmmfronttest ${{ secrets.DOCKER_USERNAME }}/pmmfronttest:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/pmmfronttest:latest

      # SSH 연결 테스트
      - name: Test SSH connection to Synology NAS
        run: |
          sshpass -p "${{ secrets.SYNOLGY_PASSWORD }}" ssh -o StrictHostKeyChecking=no hhjnn92@hhjnn92.synology.me "echo 'SSH connection successful'"

      # 기존에 실행 중인 컨테이너 중지
      - name: Stop existing container on Synology NAS
        run: |
          sshpass -p "${{ secrets.SYNOLGY_PASSWORD }}" ssh -o StrictHostKeyChecking=no hhjnn92@hhjnn92.synology.me "echo '${{ secrets.SYNOLGY_PASSWORD }}' | sudo -S /usr/local/bin/docker stop pmmfronttest"

      # 기존에 실행 중인 컨테이너 삭제
      - name: Remove existing container on Synology NAS
        run: |
          sshpass -p "${{ secrets.SYNOLGY_PASSWORD }}" ssh -o StrictHostKeyChecking=no hhjnn92@hhjnn92.synology.me "echo '${{ secrets.SYNOLGY_PASSWORD }}' | sudo -S /usr/local/bin/docker rm pmmfronttest"

      # 기존 이미지 삭제
      - name: Remove existing image on Synology NAS
        run: |
          sshpass -p "${{ secrets.SYNOLGY_PASSWORD }}" ssh -o StrictHostKeyChecking=no hhjnn92@hhjnn92.synology.me "echo '${{ secrets.SYNOLGY_PASSWORD }}' | sudo -S /usr/local/bin/docker rmi ${{ secrets.DOCKER_USERNAME }}/pmmfronttest:latest"

      # 도커 이미지 받아오기
      - name: Pull Docker image from DockerHub to Synology NAS
        run: |
          sshpass -p "${{ secrets.SYNOLGY_PASSWORD }}" ssh -o StrictHostKeyChecking=no hhjnn92@hhjnn92.synology.me "echo '${{ secrets.SYNOLGY_PASSWORD }}' | sudo -S /usr/local/bin/docker pull ${{ secrets.DOCKER_USERNAME }}/pmmfronttest:latest"

      # 새로운 컨테이너 실행
      - name: Run new container on Synology NAS
        run: |
          sshpass -p "${{ secrets.SYNOLGY_PASSWORD }}" ssh -o StrictHostKeyChecking=no hhjnn92@hhjnn92.synology.me "echo '${{ secrets.SYNOLGY_PASSWORD }}' | sudo -S /usr/local/bin/docker run --name pmmfronttest -d -p 3020:3000 ${{ secrets.DOCKER_USERNAME }}/pmmfronttest:latest"


      # # docker-compose down
      # - name: Docker-compose down
      #   run: |
      #     sshpass -p "${{ secrets.SYNOLGY_PASSWORD }}" ssh -o StrictHostKeyChecking=no hhjnn92@hhjnn92.synology.me "echo '${{ secrets.SYNOLGY_PASSWORD }}' | sudo -S /usr/local/bin/docker-compose -f /volume1/docker/coder/python/docker-compose.yml down"

      # # docker-compose up
      # - name: Docker-compose up
      #   run: |
      #     sshpass -p "${{ secrets.SYNOLGY_PASSWORD }}" ssh -o StrictHostKeyChecking=no hhjnn92@hhjnn92.synology.me "echo '${{ secrets.SYNOLGY_PASSWORD }}' | sudo -S /usr/local/bin/docker-compose -f /volume1/docker/coder/python/docker-compose.yml up -d"
